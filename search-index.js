var searchIndex = {};
searchIndex["limn"] = {"doc":"Limn is a cross platform, event driven, component based GUI library.","items":[[0,"style","limn","Contains types relevant to declaring styleable components, and the theming engine which allows styleable components to inherit values from an application theme.",null,null],[3,"Theme","limn::style","",null,null],[8,"Component","","",null,null],[10,"name","","",0,{"inputs":[],"output":{"name":"string"}}],[8,"ComponentStyle","","",null,null],[16,"Component","","",1,null],[10,"merge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"component","","",1,null],[8,"WidgetModifier","","",null,null],[10,"apply","","",2,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[8,"DrawMergeStyle","","",null,null],[10,"merge","","",3,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"box"}}],[10,"wrapper","","",3,{"inputs":[{"name":"box"}],"output":{"name":"drawwrapper"}}],[10,"box_clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"as_any","","",3,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[8,"ModifierMergeStyle","","",null,null],[10,"merge","","",4,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"box"}}],[10,"comp","","",4,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[10,"box_clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[10,"as_any","","",4,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"register_type_style","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"register_class_style","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"register_widget_style","","",5,{"inputs":[{"name":"self"},{"name":"widgetid"},{"name":"t"}],"output":null}],[11,"register_class_prop_style","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"propset"},{"name":"t"}],"output":null}],[11,"register_widget_prop_style","","",5,{"inputs":[{"name":"self"},{"name":"widgetid"},{"name":"propset"},{"name":"t"}],"output":null}],[11,"get_style","","",5,{"inputs":[{"name":"self"},{"name":"typeid"},{"name":"option"},{"name":"widgetid"},{"name":"propset"}],"output":{"name":"drawwrapper"}}],[11,"register_modifier_type_style","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"register_modifier_class_style","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":null}],[11,"get_modifier_style","","",5,{"inputs":[{"name":"self"},{"name":"box"},{"name":"typeid"},{"name":"option"}],"output":{"name":"box"}}],[0,"event","limn","Contains types relevant to event handling and the event queue.",null,null],[3,"EventArgs","limn::event","Context passed to a `EventHandler`, provides access to the widget that holds it, the `Ui`, and a flag to notify the dispatcher that the event has been handled (in the case the event is bubbling up)",null,null],[12,"widget","","",6,null],[12,"ui","","",6,null],[12,"handled","","",6,null],[5,"event_global","","Send message to UI from any thread.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"EventHandler","","Used to create a stateful event handler for widgets.",null,null],[10,"handle","","",7,{"inputs":[{"name":"self"},{"name":"t"},{"name":"eventargs"}],"output":null}],[0,"widget","limn","Module for `Widget` and callback handlers Types used to create and manage widgets.",null,null],[3,"StateUpdated","limn::widget","",null,null],[3,"StyleUpdated","","",null,null],[3,"Widget","","",null,null],[3,"LayoutGuard","","",null,null],[3,"LayoutGuardMut","","",null,null],[3,"PropsGuard","","",null,null],[3,"DrawStateGuard","","",null,null],[3,"WidgetWeak","","",null,null],[0,"property","","",null,null],[4,"Property","limn::widget::property","",null,null],[13,"MouseOver","","",8,null],[13,"Activated","","",8,null],[13,"Selected","","",8,null],[13,"Pressed","","",8,null],[13,"Inactive","","",8,null],[13,"Focused","","",8,null],[0,"states","","",null,null],[3,"MOUSEOVER","limn::widget::property::states","",null,null],[3,"PRESSED","","",null,null],[3,"ACTIVATED","","",null,null],[3,"ACTIVATED_PRESSED","","",null,null],[3,"SELECTED","","",null,null],[3,"INACTIVE","","",null,null],[3,"FOCUSED","","",null,null],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"initialize","","",15,{"inputs":[{"name":"self"}],"output":null}],[6,"PropSet","limn::widget::property","",null,null],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"property"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"ordering"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"draw","limn::widget","",null,null],[3,"DrawWrapper","limn::widget::draw","",null,null],[12,"wrapper","","",16,null],[3,"DrawEventHandler","","",null,null],[8,"Draw","","",null,null],[10,"draw","","",17,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[11,"is_under_cursor","","",17,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"point"}],"output":{"name":"bool"}}],[8,"DrawComponent","","",null,null],[10,"state","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[10,"state_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"is_under_cursor","","",16,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"point"}],"output":{"name":"bool"}}],[11,"draw","","",16,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[11,"new","","",19,{"inputs":[{"name":"e"},{"name":"f"}],"output":{"name":"self"}}],[11,"handle","","",19,{"inputs":[{"name":"self"},{"name":"e"},{"name":"eventargs"}],"output":null}],[11,"clone","limn::widget","",20,{"inputs":[{"name":"self"}],"output":{"name":"stateupdated"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"styleupdated"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"new","","Creates a new, named `Widget`, ex. \"glcanvas\". The `Widget` can then be referred to by name",22,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"from_modifier","","",22,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_modifier_style","","",22,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_modifier_style_class","","",22,{"inputs":[{"name":"t"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_draw_state","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set_draw_style","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set_draw_style_prop","","",22,{"inputs":[{"name":"self"},{"name":"propset"},{"name":"t"}],"output":{"name":"self"}}],[11,"set_style_class","","",22,{"inputs":[{"name":"self"},{"name":"typeid"},{"name":"str"}],"output":{"name":"self"}}],[11,"add_handler","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_handler_fn","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"layout","","",22,{"inputs":[{"name":"self"}],"output":{"name":"layoutguardmut"}}],[11,"layout_vars","","",22,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"props","","",22,{"inputs":[{"name":"self"}],"output":{"name":"propsguard"}}],[11,"add_prop","","",22,{"inputs":[{"name":"self"},{"name":"property"}],"output":null}],[11,"remove_prop","","",22,{"inputs":[{"name":"self"},{"name":"property"}],"output":null}],[11,"draw_state","","",22,{"inputs":[{"name":"self"}],"output":{"name":"drawstateguard"}}],[11,"downgrade","","",22,{"inputs":[{"name":"self"}],"output":{"name":"widgetweak"}}],[11,"id","","",22,{"inputs":[{"name":"self"}],"output":{"name":"widgetid"}}],[11,"set_name","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"set_debug_color","","",22,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"self"}}],[11,"name","","",22,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"debug_color","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"style_class","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"has_updated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_updated","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"bounds","","",22,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"update","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"add_child","","",22,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"self"}}],[11,"remove_child","","",22,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[11,"remove_widget","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"parent","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"children","","",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"child","","",22,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"event","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"event_subtree","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"event_bubble_up","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"trigger_event","","",22,{"inputs":[{"name":"self"},{"name":"ui"},{"name":"typeid"},{"name":"any"}],"output":{"name":"bool"}}],[11,"draw","","",22,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"renderbuilder"},{"name":"bool"}],"output":null}],[11,"is_under_cursor","","",22,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"bool"}}],[11,"hash","","",22,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"layout_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"deref_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"propset"}}],[11,"downcast_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"widgetweak"}}],[11,"upgrade","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"layout","limn","Module for layout / resizing handlers and layout solving",null,null],[3,"LimnSolver","limn::layout","",null,null],[12,"solver","","",28,null],[12,"strict","","",28,null],[3,"UpdateLayout","","",null,null],[12,"0","","",29,null],[3,"ResizeWindow","","",null,null],[3,"LayoutChanged","","",null,null],[12,"0","","",30,null],[3,"LayoutUpdated","","",null,null],[11,"linear_layout","limn::widget","Set this widgets container to be a `LinearLayout`. Children added to this widget will be arranged along one axis without overlapping.",22,{"inputs":[{"name":"self"},{"name":"linearlayoutsettings"}],"output":{"name":"self"}}],[11,"grid","","Set this widgets container to be a `GridLayout`. Children added to this widget will be arranged in a grid.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clone","limn::layout","",29,{"inputs":[{"name":"self"}],"output":{"name":"updatelayout"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"resizewindow"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"layoutchanged"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"layoutupdated"}}],[14,"constraints","","Used to specify a list of constraints.",null,null],[0,"app","limn","Contains the `App` type, used to initialize and run a Limn application.",null,null],[3,"App","limn::app","The `App` type is just a thin wrapper around a `Ui` containing the methods used to initialize and run an `App`.",null,null],[3,"FrameEvent","","Event emitted after every frame is rendered.",null,null],[11,"new","","Creates a new `App` from an existing `Window`. Automatically initializes the default event handlers for a typical desktop app:",33,{"inputs":[{"name":"window"},{"name":"eventsloop"}],"output":{"name":"self"}}],[11,"main_loop","","Updates the UI and redraws the window (the applications main loop)",33,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[11,"add_handler","","Add a new global event handler",33,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"get_root","","",33,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"window","","",33,{"inputs":[{"name":"self"}],"output":{"name":"ref"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"frameevent"}}],[0,"widgets","limn","Includes standard bundled widgets.",null,null],[0,"button","limn::widgets","",null,null],[3,"Button","limn::widgets::button","",null,null],[12,"rect","","",35,null],[12,"text","","",35,null],[3,"ButtonStyle","","",null,null],[12,"rect","","",36,null],[12,"text","","",36,null],[3,"ToggleButton","","",null,null],[12,"rect","","",37,null],[12,"off_text","","",37,null],[12,"on_text","","",37,null],[3,"ToggleButtonStyle","","",null,null],[12,"rect","","",38,null],[12,"off_text","","",38,null],[12,"on_text","","",38,null],[4,"ToggleEvent","","",null,null],[13,"On","","",39,null],[13,"Off","","",39,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"button"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",35,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"buttonstyle"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"buttonstyle"}}],[11,"merge","","",36,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",36,null],[11,"from_text","","",36,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"apply","","",35,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"togglebutton"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",37,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"togglebuttonstyle"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",38,{"inputs":[],"output":{"name":"togglebuttonstyle"}}],[11,"merge","","",38,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",38,null],[11,"rect_style","","",38,{"inputs":[{"name":"self"},{"name":"rectstyle"}],"output":null}],[11,"text","","",38,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"toggle_text","","",38,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"apply","","",37,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"toggleevent"}}],[0,"scroll","limn::widgets","",null,null],[3,"ScrollContainer","limn::widgets::scroll","",null,null],[12,"content","","",40,null],[12,"has_scrollbars","","",40,null],[3,"ScrollStyle","","",null,null],[12,"content","","",41,null],[12,"has_scrollbars","","",41,null],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"scrollcontainer"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",40,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"scrollstyle"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"scrollstyle"}}],[11,"merge","","",41,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",41,null],[11,"add_content","","Set the scrollable content",40,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"self"}}],[11,"add_scrollbar","","Display vertical and horizontal scrollbars",40,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"apply","","",40,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[0,"list","limn::widgets","",null,null],[3,"ListItemSelected","limn::widgets::list","",null,null],[12,"widget","","",42,null],[3,"ItemSelected","","",null,null],[3,"ListHandler","","",null,null],[3,"ListItemHandler","","",null,null],[3,"List","","",null,null],[12,"layout_settings","","",43,null],[3,"ListStyle","","",null,null],[12,"layout_settings","","",44,null],[5,"default_text_adapter","","",null,{"inputs":[{"name":"string"},{"name":"widget"}],"output":{"name":"widget"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itemselected"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"listhandler"}}],[11,"handle","","",46,{"inputs":[{"name":"self"},{"name":"listitemselected"},{"name":"eventargs"}],"output":null}],[11,"new","","",47,{"inputs":[{"name":"widget"}],"output":{"name":"self"}}],[11,"handle","","",47,{"inputs":[{"name":"self"},{"name":"clickevent"},{"name":"eventargs"}],"output":null}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",43,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"liststyle"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"liststyle"}}],[11,"merge","","",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",44,null],[11,"apply","","",43,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[11,"list_item","limn::widget","",22,{"inputs":[{"name":"self"},{"name":"widget"}],"output":{"name":"self"}}],[11,"on_item_selected","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"set_contents","","",22,{"inputs":[{"name":"self"},{"name":"c"},{"name":"f"}],"output":null}],[0,"slider","limn::widgets","",null,null],[3,"Slider","limn::widgets::slider","",null,null],[12,"orientation","","",48,null],[12,"range","","",48,null],[12,"init_value","","",48,null],[12,"variable_handle_size","","",48,null],[12,"handle_style","","",48,null],[12,"bar_style","","",48,null],[12,"border","","",48,null],[12,"bar_color","","",48,null],[12,"handle_color","","",48,null],[12,"highlight","","",48,null],[12,"width","","",48,null],[3,"SliderStyle","","",null,null],[12,"orientation","","",49,null],[12,"range","","",49,null],[12,"init_value","","",49,null],[12,"variable_handle_size","","",49,null],[12,"handle_style","","",49,null],[12,"bar_style","","",49,null],[12,"border","","",49,null],[12,"bar_color","","",49,null],[12,"handle_color","","",49,null],[12,"highlight","","",49,null],[12,"width","","",49,null],[3,"SliderEvent","","",null,null],[12,"value","","",50,null],[12,"offset","","",50,null],[12,"dragging","","",50,null],[3,"SetSliderValue","","",null,null],[12,"0","","",51,null],[3,"SetSliderRange","","",null,null],[12,"0","","",52,null],[4,"Orientation","","",null,null],[13,"Horizontal","","",53,null],[13,"Vertical","","",53,null],[4,"HandleStyle","","",null,null],[13,"Round","","",54,null],[13,"Square","","",54,null],[4,"BarStyle","","",null,null],[13,"NarrowRound","","",55,null],[13,"Wide","","",55,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"handlestyle"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"barstyle"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"slider"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",48,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"sliderstyle"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"sliderstyle"}}],[11,"merge","","",49,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",49,null],[11,"make_vertical","","Sets the orientation of the slider to vertical",48,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"set_width","","",48,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"set_value","","",48,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"set_range","","",48,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"self"}}],[11,"apply","","",48,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sliderevent"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"setslidervalue"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"setsliderrange"}}],[0,"edit_text","limn::widgets","",null,null],[3,"TextUpdated","limn::widgets::edit_text","",null,null],[12,"0","","",56,null],[3,"EditText","","",null,null],[12,"rect","","",57,null],[12,"focused_rect","","",57,null],[3,"EditTextStyle","","",null,null],[12,"rect","","",58,null],[12,"focused_rect","","",58,null],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"textupdated"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"edittext"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",57,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"edittextstyle"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"edittextstyle"}}],[11,"merge","","",58,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",58,null],[11,"apply","","",57,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[0,"image","limn::widgets","",null,null],[3,"Image","limn::widgets::image","",null,null],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"image"}}],[11,"new","","",59,{"inputs":[{"name":"imagesource"}],"output":{"name":"self"}}],[11,"name","","",59,{"inputs":[],"output":{"name":"string"}}],[11,"apply","","",59,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[0,"glcanvas","limn::widgets","",null,null],[3,"GLCanvasBuilder","limn::widgets::glcanvas","",null,null],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"glcanvasbuilder"}}],[11,"new","","Creates a new `GLCanvasBuilder`, returns it in form of a `Widget`",60,{"inputs":[{"name":"u64"}],"output":{"name":"widget"}}],[0,"text","limn::widgets","",null,null],[3,"StaticText","limn::widgets::text","",null,null],[12,"style","","",61,null],[3,"StaticTextStyle","","",null,null],[12,"style","","",62,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"statictext"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",61,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"statictextstyle"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"statictextstyle"}}],[11,"merge","","",62,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",62,null],[11,"from_style","","",62,{"inputs":[{"name":"textstyle"}],"output":{"name":"self"}}],[11,"from_text","","",62,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"apply","","",61,{"inputs":[{"name":"self"},{"name":"widget"}],"output":null}],[0,"draw","limn","Contains common `Draw` state, basic drawing primitives",null,null],[0,"rect","limn::draw","",null,null],[3,"RectState","limn::draw::rect","",null,null],[12,"background_color","","",63,null],[12,"corner_radius","","",63,null],[12,"border","","",63,null],[3,"RectStyle","","",null,null],[12,"background_color","","",64,null],[12,"corner_radius","","",64,null],[12,"border","","",64,null],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"rectstate"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",63,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"rectstyle"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"rectstyle"}}],[11,"merge","","",64,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",64,null],[11,"draw","","",63,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[0,"ellipse","limn::draw","",null,null],[3,"EllipseState","limn::draw::ellipse","",null,null],[12,"background_color","","",65,null],[12,"border","","",65,null],[3,"EllipseStyle","","",null,null],[12,"background_color","","",66,null],[12,"border","","",66,null],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"ellipsestate"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",65,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ellipsestyle"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"ellipsestyle"}}],[11,"merge","","",66,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",66,null],[11,"draw","","",65,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[11,"is_under_cursor","","",65,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"point"}],"output":{"name":"bool"}}],[0,"text","limn::draw","",null,null],[3,"TextState","limn::draw::text","",null,null],[12,"text","","",67,null],[12,"font","","",67,null],[12,"font_size","","",67,null],[12,"text_color","","",67,null],[12,"background_color","","",67,null],[12,"wrap","","",67,null],[12,"align","","",67,null],[3,"TextStyle","","",null,null],[12,"text","","",68,null],[12,"font","","",68,null],[12,"font_size","","",68,null],[12,"text_color","","",68,null],[12,"background_color","","",68,null],[12,"wrap","","",68,null],[12,"align","","",68,null],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"textstate"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"name","","",67,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"textstyle"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"textstyle"}}],[11,"merge","","",68,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"component","","",68,null],[11,"from_text","","",68,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"measure","","",67,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"min_height","","",67,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"line_height","","",67,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"text_fits","","",67,{"inputs":[{"name":"self"},{"name":"str"},{"name":"rect"}],"output":{"name":"bool"}}],[11,"draw","","",67,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[0,"image","limn::draw","",null,null],[3,"ImageState","limn::draw::image","",null,null],[12,"image","","",69,null],[12,"scale","","",69,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"imagestate"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",69,{"inputs":[],"output":{"name":"string"}}],[11,"new","","",69,{"inputs":[{"name":"imagesource"}],"output":{"name":"self"}}],[11,"measure","","",69,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"scale","","",69,{"inputs":[{"name":"self"},{"name":"size"}],"output":null}],[11,"draw","","",69,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[0,"glcanvas","limn::draw","",null,null],[3,"GLCanvasState","limn::draw::glcanvas","",null,null],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"glcanvasstate"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"name","","",70,{"inputs":[],"output":{"name":"string"}}],[11,"new","","",70,{"inputs":[{"name":"u64"}],"output":{"name":"glcanvasstate"}}],[11,"measure","","",70,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"draw","","",70,{"inputs":[{"name":"self"},{"name":"rect"},{"name":"rect"},{"name":"renderbuilder"}],"output":null}],[0,"ui","limn","Contains `Ui`, which contains application global state and is accessible to every event handler.",null,null],[3,"Ui","limn::ui","The core of a limn application, holds the root of the widget tree and other application global state. `Ui` is accessible to every event handler, so features helper methods that can be accessed at any time.",null,null],[12,"window","","",71,null],[3,"RegisterWidget","","",null,null],[12,"0","","",72,null],[3,"RemoveWidget","","",null,null],[12,"0","","",73,null],[3,"WidgetAttachedEvent","","",null,null],[3,"WidgetDetachedEvent","","",null,null],[3,"ChildAttachedEvent","","",null,null],[12,"0","","",74,null],[12,"1","","",74,null],[3,"WidgetsUnderCursor","","",null,null],[3,"WidgetsBfs","","",null,null],[4,"ChildrenUpdatedEvent","","",null,null],[13,"Added","","",75,null],[13,"Removed","","",75,null],[11,"get_widget","","",71,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"option"}}],[11,"get_root","","",71,{"inputs":[{"name":"self"}],"output":{"name":"widget"}}],[11,"event","","",71,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"close","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"check_layout_changes","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"redraw","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"needs_redraw","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"widgets_bfs","","",71,{"inputs":[{"name":"self"}],"output":{"name":"widgetsbfs"}}],[11,"widgets_under_cursor","","",71,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"widgetsundercursor"}}],[11,"widget_under_cursor","","Find the first widget under the cursor, ie. the last to be drawn that is under the cursor",71,{"inputs":[{"name":"self"},{"name":"point"}],"output":{"name":"option"}}],[11,"set_debug_draw_bounds","","",71,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"debug_widget_positions","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"print_widgets","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"registerwidget"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"removewidget"}}],[11,"add_ui_handlers","limn::app","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","limn::ui","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"widgetattachedevent"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"widgetdetachedevent"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"childattachedevent"}}],[11,"next","","",78,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",79,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"geometry","limn","Geometric type definitions, such as `Point`, `Rect` and `Size`",null,null],[3,"DevicePixel","limn::geometry","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",null,null],[6,"DensityIndependentPixel","","This is the unit used for all geometric types that represent a position on screen, independent of the device's hidpi factor, or \"Device Pixel Ratio\". Sometimes known as 'points', logical pixels or device independent pixels,",null,null],[6,"Size","","",null,null],[6,"Point","","",null,null],[6,"Vector","","",null,null],[6,"Rect","","",null,null],[8,"RectExt","","Extension trait for rectangles. Helper methods for rectangle sides depend on the assumption that `Rect` size never contains negative values.",null,null],[10,"from_rusttype","","",80,{"inputs":[{"name":"rect"}],"output":{"name":"self"}}],[10,"to_slice","","",80,null],[10,"left","","",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"top","","",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"right","","",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"bottom","","",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"width","","",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"height","","",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"center","","",80,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[10,"shrink_bounds","","",80,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[8,"SizeExt","","Extension trait for sizes.",null,null],[10,"from_array","","",81,null],[10,"from_tuple","","",81,null],[11,"from_rusttype","","",82,{"inputs":[{"name":"rect"}],"output":{"name":"self"}}],[11,"to_slice","","",82,null],[11,"left","","",82,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"top","","",82,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"right","","",82,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"bottom","","",82,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"width","","",82,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"height","","",82,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"center","","",82,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"shrink_bounds","","",82,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"from_array","","",83,null],[11,"from_tuple","","",83,null],[0,"resources","limn","Font, image and texture resources",null,null],[3,"WidgetId","limn::resources","",null,null],[12,"0","","",84,null],[3,"Map","","Map for a given `Id` and resource type.",null,null],[3,"Resources","","",null,null],[12,"font_loader","","",85,null],[12,"image_loader","","",85,null],[12,"widget_id","","",85,null],[12,"theme","","",85,null],[5,"init_resources","","",null,{"inputs":[{"name":"renderapisender"}],"output":null}],[5,"resources","","",null,{"inputs":[],"output":{"name":"mutexguard"}}],[0,"id","","",null,null],[3,"IdGen","limn::resources::id","Generates named Ids, wrappers around increasing usize values. For Ids to be unique, just needs to be one `IdGen` per Id type.",null,null],[3,"WidgetId","","",null,null],[12,"0","","",86,null],[8,"Id","","",null,null],[10,"new","","",87,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"self"}}],[11,"next_id","","Not to be confused with `std::iterator::Iterator::next()`! This function simply increases the Id by 1 while keeping the type",88,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"widgetid"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"ordering"}}],[11,"new","","",86,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[0,"font","limn::resources","",null,null],[3,"FontInfo","limn::resources::font","",null,null],[12,"key","","",89,null],[12,"info","","",89,null],[3,"FontDescriptor","","Set of properties used to specify a font",null,null],[12,"family_name","","",90,null],[12,"italic","","",90,null],[12,"bold","","",90,null],[3,"FontLoader","","",null,null],[12,"render","","",91,null],[12,"font_info","","",91,null],[12,"bundled_font_info","","",91,null],[12,"font_instances","","",91,null],[6,"Font","","",null,null],[11,"default","","",90,{"inputs":[],"output":{"name":"fontdescriptor"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"fontdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"fontdescriptor"}],"output":{"name":"bool"}}],[11,"hash","","",90,null],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"fontdescriptor"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_family","","",90,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"fontloader"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"get_font","","",91,{"inputs":[{"name":"self"},{"name":"fontdescriptor"}],"output":{"name":"result"}}],[11,"get_font_instance","","",91,{"inputs":[{"name":"self"},{"name":"fontdescriptor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"register_font_data","","",91,{"inputs":[{"name":"self"},{"name":"fontdescriptor"},{"name":"vec"}],"output":{"name":"result"}}],[0,"image","limn::resources","",null,null],[3,"ImageInfo","limn::resources::image","",null,null],[12,"key","","",92,null],[12,"descriptor","","",92,null],[3,"ImageLoader","","",null,null],[12,"render","","",93,null],[12,"assets_path","","",93,null],[12,"bundled_images","","",93,null],[12,"images","","",93,null],[12,"texture_descriptors","","",93,null],[4,"ImageSource","","",null,null],[13,"AbsolutePath","","",94,null],[13,"AssetPath","","",94,null],[13,"Bundled","","",94,null],[5,"premultiply","","",null,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"imagesource"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"imagesource"}],"output":{"name":"bool"}}],[11,"hash","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"imagesource"}}],[11,"absolute","","",94,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"asset","","",94,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"bundled","","",94,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"imageinfo"}}],[11,"default","","",93,{"inputs":[],"output":{"name":"imageloader"}}],[11,"new","","",93,{"inputs":[],"output":{"name":"self"}}],[11,"get_image","","",93,{"inputs":[{"name":"self"},{"name":"imagesource"}],"output":{"name":"result"}}],[11,"create_image_resource","","",93,{"inputs":[{"name":"self"},{"name":"imagedata"},{"name":"imagedescriptor"}],"output":{"name":"imageinfo"}}],[11,"update_texture","","",93,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"imagedescriptor"},{"name":"externalimagedata"}],"output":null}],[11,"load_image","","",93,{"inputs":[{"name":"self"},{"name":"str"},{"name":"vec"}],"output":null}],[11,"clone","limn::resources","",84,{"inputs":[{"name":"self"}],"output":{"name":"widgetid"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"widgetid"}],"output":{"name":"ordering"}}],[11,"new","","",84,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"self"}}],[11,"get","","Borrow the resource associated with the given `Id`.",95,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","Adds the given resource to the `Map` and returns a unique `Id` for it.",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"i"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new `Resources` struct, same as calling `default()`",85,{"inputs":[],"output":{"name":"self"}}],[11,"widget_id","","",85,{"inputs":[{"name":"self"}],"output":{"name":"widgetid"}}],[0,"color","limn","Color helper types and constants",null,null],[3,"Color","limn::color","",null,null],[12,"0","","",96,null],[17,"TRANSPARENT","","",null,null],[17,"BLACK","","",null,null],[17,"WHITE","","",null,null],[17,"GRAY_10","","",null,null],[17,"GRAY_20","","",null,null],[17,"GRAY_30","","",null,null],[17,"GRAY_40","","",null,null],[17,"GRAY_50","","",null,null],[17,"GRAY_60","","",null,null],[17,"GRAY_70","","",null,null],[17,"GRAY_80","","",null,null],[17,"GRAY_90","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"BLUE","","",null,null],[17,"YELLOW","","",null,null],[17,"FUSCHIA","","",null,null],[17,"CYAN","","",null,null],[17,"BLUE_HIGHLIGHT","","",null,null],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"color"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"color"}],"output":{"name":"bool"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"color"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",96,{"inputs":[{"name":"self"}],"output":{"name":"colorf"}}],[0,"input","limn","Contains handlers for input events from `winit` (keyboard, mouse etc.), generally responsible for forwarding input to other handlers.",null,null],[3,"InputEvent","limn::input","",null,null],[12,"0","","",97,null],[3,"EscKeyCloseHandler","","Triggers exit on Esc key press.",null,null],[3,"DebugSettingsHandler","","Triggers various debugging settings/events on function key presses.",null,null],[0,"mouse","","Mouse input handlers.",null,null],[3,"MouseMoved","limn::input::mouse","",null,null],[12,"0","","",98,null],[3,"MouseWheel","","",null,null],[12,"0","","",99,null],[3,"MouseButton","","",null,null],[12,"0","","",100,null],[12,"1","","",100,null],[3,"CursorLeftWindow","","",null,null],[3,"WidgetMouseWheel","","",null,null],[12,"0","","",101,null],[3,"WidgetMouseButton","","",null,null],[12,"0","","",102,null],[12,"1","","",102,null],[3,"ClickEvent","","",null,null],[12,"position","","",103,null],[4,"MouseOverEvent","","",null,null],[13,"Over","","",104,null],[13,"Out","","",104,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"mousemoved"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"mousewheel"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"cursorleftwindow"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"widgetmousewheel"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"widgetmousebutton"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"clickevent"}}],[11,"add_mouse_handlers","limn::app","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","limn::input::mouse","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"mouseoverevent"}}],[11,"enable_hover","limn::widget","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"keyboard","limn::input","Keyboard input handlers.",null,null],[3,"ReceivedCharacter","limn::input::keyboard","",null,null],[12,"0","","",106,null],[3,"KeyboardInput","","",null,null],[12,"0","","",107,null],[3,"WidgetKeyboardInput","","",null,null],[12,"0","","",108,null],[3,"WidgetReceivedCharacter","","",null,null],[12,"0","","",109,null],[3,"FocusHandler","","Note on focus: The tab key iterates through the widgets that have registered as focusable. Currently the order of this iteration is just based on the order the widgets are registered as focusable. Later on maybe it should be based on the relative positioning of widgets (could get ugly updating the treemap as widgets change position), or some user defined ordering.",null,null],[4,"KeyboardInputEvent","","",null,null],[13,"AddFocusable","","",110,null],[13,"RemoveFocusable","","",110,null],[13,"FocusChange","","",110,null],[13,"KeyboardInput","","",110,null],[13,"ReceivedCharacter","","",110,null],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"receivedcharacter"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"widgetkeyboardinput"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"widgetreceivedcharacter"}}],[11,"default","","",111,{"inputs":[],"output":{"name":"focushandler"}}],[11,"new","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","",111,{"inputs":[{"name":"self"},{"name":"keyboardinputevent"},{"name":"eventargs"}],"output":null}],[11,"make_focusable","limn::widget","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_keyboard_handlers","limn::app","",33,{"inputs":[{"name":"self"}],"output":null}],[0,"drag","limn::input","",null,null],[3,"DragEvent","limn::input::drag","",null,null],[12,"state","","",112,null],[12,"position","","mouse position",112,null],[12,"offset","","offset from drag start",112,null],[12,"change","","change since last DragEvent",112,null],[4,"DragState","","",null,null],[13,"Start","","",113,null],[13,"Moved","","",113,null],[13,"End","","",113,null],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"dragevent"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"dragstate"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"dragstate"}],"output":{"name":"bool"}}],[11,"make_draggable","limn::widget","Make a widget receive drag events.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add_drag_handlers","limn::app","Add handlers to UI to enable drag detection UI receives messages from draggable widgets when they are clicked, and combines that with mouse move and mouse release events to synthesize `DragEvent`s",33,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","limn::input","",97,{"inputs":[{"name":"self"}],"output":{"name":"inputevent"}}],[11,"add_input_handlers","limn::app","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","limn::input","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"esckeyclosehandler"}}],[11,"handle","","",114,{"inputs":[{"name":"self"},{"name":"keyboardinput"},{"name":"eventargs"}],"output":null}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"debugsettingshandler"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","",115,{"inputs":[{"name":"self"},{"name":"keyboardinput"},{"name":"eventargs"}],"output":null}],[0,"prelude","limn","Re-exports of common crate-internal functions / structs",null,null],[0,"os","limn::prelude::glutin","Contains traits with platform-specific methods in them.",null,null],[0,"unix","limn::prelude::glutin::os","",null,null],[8,"WindowBuilderExt","limn::prelude::glutin::os::unix","Additional methods on `WindowBuilder` that are specific to Unix.",null,null],[10,"with_x11_visual","","",116,null],[10,"with_x11_screen","","",116,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[4,"RawHandle","","Context handles available on Unix-like platforms.",null,null],[13,"Glx","","",117,null],[13,"Egl","","",117,null],[8,"WindowExt","","Additional methods on `Window` that are specific to Unix.",null,null],[10,"get_xlib_window","","Returns a pointer to the `Window` object of xlib that is used by this window.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_display","","Returns a pointer to the `Display` object of xlib that is used by this window.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_screen_id","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_xlib_xconnection","","",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"send_xim_spot","","",118,null],[10,"get_xcb_connection","","This function returns the underlying `xcb_connection_t` of an xlib `Display`.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_surface","","Returns a pointer to the `wl_surface` object of wayland that is used by this window.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_wayland_display","","Returns a pointer to the `wl_display` object of wayland that is used by this window.",118,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"is_ready","","Check if the window is ready for drawing",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[4,"XNotSupported","","Error returned if this system doesn't have XLib or can't create an X connection.",null,null],[13,"LibraryOpenError","","Failed to load one or several shared libraries.",119,null],[13,"XOpenDisplayFailed","","Connecting to the X server with `XOpenDisplay` failed.",119,null],[8,"EventsLoopExt","","Additional methods on `EventsLoop` that are specific to Linux.",null,null],[10,"new_x11","","Builds a new `EventsLoop` that is forced to use X11.",120,{"inputs":[],"output":{"name":"result"}}],[10,"new_wayland","","Builds a new `EventsLoop` that is forced to use Wayland.",120,{"inputs":[],"output":{"name":"self"}}],[10,"is_wayland","","True if the `EventsLoop` uses Wayland.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_x11","","True if the `EventsLoop` uses X11.",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MonitorIdExt","","Additional methods on `MonitorId` that are specific to Linux.",null,null],[10,"native_id","","Returns the inner identifier of the monitor.",121,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[6,"GLXContext","","",null,null],[6,"EGLContext","","",null,null],[8,"GlContextExt","limn::prelude::glutin::os","Platform-specific extensions for OpenGL contexts.",null,null],[16,"Handle","","Raw context handle.",122,null],[10,"raw_handle","","Returns the raw context handle.",122,null],[8,"GlContext","limn::prelude::glutin","A trait for types associated with a GL context.",null,null],[10,"make_current","","Sets the context as the current context.",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"is_current","","Returns true if this context is the current one in this thread.",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"get_proc_address","","Returns the address of an OpenGL function.",123,null],[10,"swap_buffers","","Swaps the buffers in case of double or triple buffering.",123,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"get_api","","Returns the OpenGL API being used.",123,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[10,"get_pixel_format","","Returns the pixel format of the main framebuffer of the context.",123,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[10,"resize","","Resize the GL context.",123,null],[3,"Context","","Represents an OpenGL context.",null,null],[3,"ContextBuilder","","Object that allows you to build `Context`s.",null,null],[12,"gl_attr","","The attributes to use to create the context.",124,null],[3,"GlWindow","","Represents an OpenGL context and a Window with which it is associated.",null,null],[4,"CreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",125,null],[13,"NotSupported","","TODO: remove this error",125,null],[13,"NoBackendAvailable","","",125,null],[13,"RobustnessNotSupported","","",125,null],[13,"OpenGlVersionNotSupported","","",125,null],[13,"NoAvailablePixelFormat","","",125,null],[13,"PlatformSpecific","","",125,null],[13,"Window","","",125,null],[4,"ContextError","","Error that can happen when manipulating an OpenGL context.",null,null],[13,"IoError","","",126,null],[13,"ContextLost","","",126,null],[4,"Api","","All APIs related to OpenGL that you can possibly get while using glutin.",null,null],[13,"OpenGl","","The classical OpenGL. Available on Windows, Linux, OS/X.",127,null],[13,"OpenGlEs","","OpenGL embedded system. Available on Linux, Android.",127,null],[13,"WebGl","","OpenGL for the web. Very similar to OpenGL ES.",127,null],[4,"GlProfile","","Describes the requested OpenGL context profiles.",null,null],[13,"Compatibility","","Include all the immediate more functions and definitions.",128,null],[13,"Core","","Include all the future-compatible functions and definitions.",128,null],[4,"GlRequest","","Describes the OpenGL API and version that are being requested when a context is created.",null,null],[13,"Latest","","Request the latest version of the \"best\" API of this platform.",129,null],[13,"Specific","","Request a specific version of a specific API.",129,null],[13,"GlThenGles","","If OpenGL is available, create an OpenGL context with the specified `opengl_version`. Else if OpenGL ES or WebGL is available, create a context with the specified `opengles_version`.",129,null],[12,"opengl_version","limn::prelude::glutin::GlRequest","The version to use for OpenGL.",129,null],[12,"opengles_version","","The version to use for OpenGL ES.",129,null],[7,"GL_CORE","limn::prelude::glutin","The minimum core profile GL context. Useful for getting the minimum required GL version while still running on OSX, which often forbids the compatibility profile features.",null,null],[4,"Robustness","","Specifies the tolerance of the OpenGL context to faults. If you accept raw OpenGL commands and/or raw shader code from an untrusted source, you should definitely care about this.",null,null],[13,"NotRobust","","Not everything is checked. Your application can crash if you do something wrong with your shaders.",130,null],[13,"NoError","","The driver doesn't check anything. This option is very dangerous. Please know what you're doing before using it. See the `GL_KHR_no_error` extension.",130,null],[13,"RobustNoResetNotification","","Everything is checked to avoid any crash. The driver will attempt to avoid any problem, but if a problem occurs the behavior is implementation-defined. You are just guaranteed not to get a crash.",130,null],[13,"TryRobustNoResetNotification","","Same as `RobustNoResetNotification` but the context creation doesn't fail if it's not supported.",130,null],[13,"RobustLoseContextOnReset","","Everything is checked to avoid any crash. If a problem occurs, the context will enter a \"context lost\" state. It must then be recreated. For the moment, glutin doesn't provide a way to recreate a context with the same window :-/",130,null],[13,"TryRobustLoseContextOnReset","","Same as `RobustLoseContextOnReset` but the context creation doesn't fail if it's not supported.",130,null],[4,"ReleaseBehavior","","The behavior of the driver when you change the current context.",null,null],[13,"None","","Doesn't do anything. Most notably doesn't flush.",131,null],[13,"Flush","","Flushes the context that was previously current as if `glFlush` was called.",131,null],[3,"PixelFormat","","Describes a possible format. Unused.",null,null],[12,"hardware_accelerated","","",132,null],[12,"color_bits","","",132,null],[12,"alpha_bits","","",132,null],[12,"depth_bits","","",132,null],[12,"stencil_bits","","",132,null],[12,"stereoscopy","","",132,null],[12,"double_buffer","","",132,null],[12,"multisampling","","",132,null],[12,"srgb","","",132,null],[3,"PixelFormatRequirements","","Describes how the backend should choose a pixel format.",null,null],[12,"hardware_accelerated","","If true, only hardware-accelerated formats will be considered. If false, only software renderers. `None` means \"don't care\". Default is `Some(true)`.",133,null],[12,"color_bits","","Minimum number of bits for the color buffer, excluding alpha. `None` means \"don't care\". The default is `Some(24)`.",133,null],[12,"float_color_buffer","","If true, the color buffer must be in a floating point format. Default is `false`.",133,null],[12,"alpha_bits","","Minimum number of bits for the alpha in the color buffer. `None` means \"don't care\". The default is `Some(8)`.",133,null],[12,"depth_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(24)`.",133,null],[12,"stencil_bits","","Minimum number of bits for the depth buffer. `None` means \"don't care\". The default value is `Some(8)`.",133,null],[12,"double_buffer","","If true, only double-buffered formats will be considered. If false, only single-buffer formats. `None` means \"don't care\". The default is `Some(true)`.",133,null],[12,"multisampling","","Contains the minimum number of samples per pixel in the color, depth and stencil buffers. `None` means \"don't care\". Default is `None`. A value of `Some(0)` indicates that multisampling must not be enabled.",133,null],[12,"stereoscopy","","If true, only stereoscopic formats will be considered. If false, only non-stereoscopic formats. The default is `false`.",133,null],[12,"srgb","","If true, only sRGB-capable formats will be considered. If false, don't care. The default is `false`.",133,null],[12,"release_behavior","","The behavior when changing the current context. Default is `Flush`.",133,null],[3,"GlAttributes","","Attributes to use when creating an OpenGL context.",null,null],[12,"sharing","","An existing context to share the new the context with.",134,null],[12,"version","","Version to try create. See `GlRequest` for more infos.",134,null],[12,"profile","","OpenGL profile to use.",134,null],[12,"debug","","Whether to enable the `debug` flag of the context.",134,null],[12,"robustness","","How the OpenGL context should detect errors.",134,null],[12,"vsync","","Whether to use vsync. If vsync is enabled, calling `swap_buffers` will block until the screen refreshes. This is typically used to prevent screen tearing.",134,null],[3,"EventsLoopClosed","","The error that is returned when an `EventsLoopProxy` attempts to wake up an `EventsLoop` that no longer exists.",null,null],[4,"MouseScrollDelta","","Describes a difference in the mouse scroll wheel state.",null,null],[13,"LineDelta","","Amount in lines or rows to scroll in the horizontal and vertical directions.",135,null],[13,"PixelDelta","","Amount in pixels to scroll in the horizontal and vertical direction.",135,null],[3,"HeadlessContext","","Represents a headless OpenGL context.",null,null],[3,"HeadlessRendererBuilder","","Object that allows you to build headless contexts.",null,null],[12,"dimensions","","The dimensions to use.",136,null],[12,"opengl","","The OpenGL attributes to build the context with.",136,null],[3,"ModifiersState","","Represents the current state of the keyboard modifiers",null,null],[12,"shift","","The \"shift\" key",137,null],[12,"ctrl","","The \"control\" key",137,null],[12,"alt","","The \"alt\" key",137,null],[12,"logo","","The \"logo\" key",137,null],[4,"TouchPhase","","Describes touch-screen input state.",null,null],[13,"Started","","",138,null],[13,"Moved","","",138,null],[13,"Ended","","",138,null],[13,"Cancelled","","",138,null],[4,"Event","","Describes a generic event.",null,null],[13,"WindowEvent","","",139,null],[12,"window_id","limn::prelude::glutin::Event","",139,null],[12,"event","","",139,null],[13,"DeviceEvent","limn::prelude::glutin","",139,null],[12,"device_id","limn::prelude::glutin::Event","",139,null],[12,"event","","",139,null],[13,"Awakened","limn::prelude::glutin","",139,null],[13,"Suspended","","The application has been suspended or resumed.",139,null],[6,"AxisId","","Identifier for a specific analog axis on some device.",null,null],[3,"KeyboardInput","","Describes a keyboard input event.",null,null],[12,"scancode","","Identifies the physical key pressed",140,null],[12,"state","","",140,null],[12,"virtual_keycode","","Identifies the semantic meaning of the key",140,null],[12,"modifiers","","Modifier keys active at the time of this input.",140,null],[4,"MouseCursor","","Describes the appearance of the mouse cursor.",null,null],[13,"Default","","The platform-dependent default cursor.",141,null],[13,"Crosshair","","A simple crosshair.",141,null],[13,"Hand","","A hand (often used to indicate links in web browsers).",141,null],[13,"Arrow","","Self explanatory.",141,null],[13,"Move","","Indicates something is to be moved.",141,null],[13,"Text","","Indicates text that may be selected or edited.",141,null],[13,"Wait","","Program busy indicator.",141,null],[13,"Help","","Help indicator (often rendered as a \"?\")",141,null],[13,"Progress","","Progress indicator. Shows that processing is being done. But in contrast with \"Wait\" the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass.",141,null],[13,"NotAllowed","","Cursor showing that something cannot be done.",141,null],[13,"ContextMenu","","",141,null],[13,"NoneCursor","","",141,null],[13,"Cell","","",141,null],[13,"VerticalText","","",141,null],[13,"Alias","","",141,null],[13,"Copy","","",141,null],[13,"NoDrop","","",141,null],[13,"Grab","","",141,null],[13,"Grabbing","","",141,null],[13,"AllScroll","","",141,null],[13,"ZoomIn","","",141,null],[13,"ZoomOut","","",141,null],[13,"EResize","","Indicate that some edge is to be moved. For example, the 'SeResize' cursor is used when the movement starts from the south-east corner of the box.",141,null],[13,"NResize","","",141,null],[13,"NeResize","","",141,null],[13,"NwResize","","",141,null],[13,"SResize","","",141,null],[13,"SeResize","","",141,null],[13,"SwResize","","",141,null],[13,"WResize","","",141,null],[13,"EwResize","","",141,null],[13,"NsResize","","",141,null],[13,"NeswResize","","",141,null],[13,"NwseResize","","",141,null],[13,"ColResize","","",141,null],[13,"RowResize","","",141,null],[3,"WindowAttributes","","Attributes to use when creating a window.",null,null],[12,"dimensions","","The dimensions of the window. If this is `None`, some platform-specific dimensions will be used.",142,null],[12,"min_dimensions","","The minimum dimensions a window can be, If this is `None`, the window will have no minimum dimensions (aside from reserved).",142,null],[12,"max_dimensions","","The maximum dimensions a window can be, If this is `None`, the maximum will have no maximum or will be set to the primary monitor's dimensions by the platform.",142,null],[12,"fullscreen","","Whether the window should be set as fullscreen upon creation.",142,null],[12,"title","","The title of the window in the title bar.",142,null],[12,"maximized","","Whether the window should be maximized upon creation.",142,null],[12,"visible","","Whether the window should be immediately visible upon creation.",142,null],[12,"transparent","","Whether the the window should be transparent. If this is true, writing colors with alpha values different than `1.0` will produce a transparent window.",142,null],[12,"decorations","","Whether the window should have borders and bars.",142,null],[12,"multitouch","","[iOS only] Enable multitouch, see multipleTouchEnabled",142,null],[4,"WindowCreationError","","Error that can happen while creating a window or a headless renderer.",null,null],[13,"OsError","","",143,null],[13,"NotSupported","","TODO: remove this error",143,null],[3,"Touch","","Represents touch event",null,null],[12,"device_id","","",144,null],[12,"phase","","",144,null],[12,"location","","",144,null],[12,"id","","unique identifier of a finger.",144,null],[3,"EventsLoopProxy","","Used to wake up the `EventsLoop` from another thread.",null,null],[6,"ScanCode","","Hardware-dependent keyboard scan code.",null,null],[3,"AvailableMonitorsIter","","An iterator for the list of available monitors.",null,null],[4,"MouseButton","","Describes a button of a mouse controller.",null,null],[13,"Left","","",145,null],[13,"Right","","",145,null],[13,"Middle","","",145,null],[13,"Other","","",145,null],[3,"WindowId","","Identifier of a window. Unique for each window.",null,null],[3,"DeviceId","","Identifier of an input device.",null,null],[3,"Window","","Represents a window.",null,null],[3,"MonitorId","","Identifier for a monitor.",null,null],[4,"ControlFlow","","Returned by the user callback given to the `EventsLoop::run_forever` method.",null,null],[13,"Continue","","Continue looping and waiting for events.",146,null],[13,"Break","","Break from the event loop.",146,null],[4,"DeviceEvent","","Represents raw hardware events that are not associated with any particular window.",null,null],[13,"Added","","",147,null],[13,"Removed","","",147,null],[13,"MouseMotion","","Change in physical position of a pointing device.",147,null],[12,"delta","limn::prelude::glutin::DeviceEvent","(x, y) change in position in unspecified units.",147,null],[13,"MouseWheel","limn::prelude::glutin","Physical scroll event",147,null],[12,"delta","limn::prelude::glutin::DeviceEvent","",147,null],[13,"Motion","limn::prelude::glutin","Motion on some analog axis.  This event will be reported for all arbitrary input devices that winit supports on this platform, including mouse devices.  If the device is a mouse device then this will be reported alongside the MouseMotion event.",147,null],[12,"axis","limn::prelude::glutin::DeviceEvent","",147,null],[12,"value","","",147,null],[13,"Button","limn::prelude::glutin","",147,null],[12,"button","limn::prelude::glutin::DeviceEvent","",147,null],[12,"state","","",147,null],[13,"Key","limn::prelude::glutin","",147,null],[13,"Text","","",147,null],[12,"codepoint","limn::prelude::glutin::DeviceEvent","",147,null],[3,"EventsLoop","limn::prelude::glutin","Provides a way to retreive events from the system and from the windows that were registered to the events loop.",null,null],[4,"VirtualKeyCode","","Symbolic name for a keyboard key.",null,null],[13,"Key1","","The '1' key over the letters.",148,null],[13,"Key2","","The '2' key over the letters.",148,null],[13,"Key3","","The '3' key over the letters.",148,null],[13,"Key4","","The '4' key over the letters.",148,null],[13,"Key5","","The '5' key over the letters.",148,null],[13,"Key6","","The '6' key over the letters.",148,null],[13,"Key7","","The '7' key over the letters.",148,null],[13,"Key8","","The '8' key over the letters.",148,null],[13,"Key9","","The '9' key over the letters.",148,null],[13,"Key0","","The '0' key over the 'O' and 'P' keys.",148,null],[13,"A","","",148,null],[13,"B","","",148,null],[13,"C","","",148,null],[13,"D","","",148,null],[13,"E","","",148,null],[13,"F","","",148,null],[13,"G","","",148,null],[13,"H","","",148,null],[13,"I","","",148,null],[13,"J","","",148,null],[13,"K","","",148,null],[13,"L","","",148,null],[13,"M","","",148,null],[13,"N","","",148,null],[13,"O","","",148,null],[13,"P","","",148,null],[13,"Q","","",148,null],[13,"R","","",148,null],[13,"S","","",148,null],[13,"T","","",148,null],[13,"U","","",148,null],[13,"V","","",148,null],[13,"W","","",148,null],[13,"X","","",148,null],[13,"Y","","",148,null],[13,"Z","","",148,null],[13,"Escape","","The Escape key, next to F1.",148,null],[13,"F1","","",148,null],[13,"F2","","",148,null],[13,"F3","","",148,null],[13,"F4","","",148,null],[13,"F5","","",148,null],[13,"F6","","",148,null],[13,"F7","","",148,null],[13,"F8","","",148,null],[13,"F9","","",148,null],[13,"F10","","",148,null],[13,"F11","","",148,null],[13,"F12","","",148,null],[13,"F13","","",148,null],[13,"F14","","",148,null],[13,"F15","","",148,null],[13,"Snapshot","","Print Screen/SysRq.",148,null],[13,"Scroll","","Scroll Lock.",148,null],[13,"Pause","","Pause/Break key, next to Scroll lock.",148,null],[13,"Insert","","`Insert`, next to Backspace.",148,null],[13,"Home","","",148,null],[13,"Delete","","",148,null],[13,"End","","",148,null],[13,"PageDown","","",148,null],[13,"PageUp","","",148,null],[13,"Left","","",148,null],[13,"Up","","",148,null],[13,"Right","","",148,null],[13,"Down","","",148,null],[13,"Back","","The Backspace key, right over Enter.",148,null],[13,"Return","","The Enter key.",148,null],[13,"Space","","The space bar.",148,null],[13,"Compose","","The \"Compose\" key on Linux.",148,null],[13,"Numlock","","",148,null],[13,"Numpad0","","",148,null],[13,"Numpad1","","",148,null],[13,"Numpad2","","",148,null],[13,"Numpad3","","",148,null],[13,"Numpad4","","",148,null],[13,"Numpad5","","",148,null],[13,"Numpad6","","",148,null],[13,"Numpad7","","",148,null],[13,"Numpad8","","",148,null],[13,"Numpad9","","",148,null],[13,"AbntC1","","",148,null],[13,"AbntC2","","",148,null],[13,"Add","","",148,null],[13,"Apostrophe","","",148,null],[13,"Apps","","",148,null],[13,"At","","",148,null],[13,"Ax","","",148,null],[13,"Backslash","","",148,null],[13,"Calculator","","",148,null],[13,"Capital","","",148,null],[13,"Colon","","",148,null],[13,"Comma","","",148,null],[13,"Convert","","",148,null],[13,"Decimal","","",148,null],[13,"Divide","","",148,null],[13,"Equals","","",148,null],[13,"Grave","","",148,null],[13,"Kana","","",148,null],[13,"Kanji","","",148,null],[13,"LAlt","","",148,null],[13,"LBracket","","",148,null],[13,"LControl","","",148,null],[13,"LMenu","","",148,null],[13,"LShift","","",148,null],[13,"LWin","","",148,null],[13,"Mail","","",148,null],[13,"MediaSelect","","",148,null],[13,"MediaStop","","",148,null],[13,"Minus","","",148,null],[13,"Multiply","","",148,null],[13,"Mute","","",148,null],[13,"MyComputer","","",148,null],[13,"NavigateForward","","",148,null],[13,"NavigateBackward","","",148,null],[13,"NextTrack","","",148,null],[13,"NoConvert","","",148,null],[13,"NumpadComma","","",148,null],[13,"NumpadEnter","","",148,null],[13,"NumpadEquals","","",148,null],[13,"OEM102","","",148,null],[13,"Period","","",148,null],[13,"PlayPause","","",148,null],[13,"Power","","",148,null],[13,"PrevTrack","","",148,null],[13,"RAlt","","",148,null],[13,"RBracket","","",148,null],[13,"RControl","","",148,null],[13,"RMenu","","",148,null],[13,"RShift","","",148,null],[13,"RWin","","",148,null],[13,"Semicolon","","",148,null],[13,"Slash","","",148,null],[13,"Sleep","","",148,null],[13,"Stop","","",148,null],[13,"Subtract","","",148,null],[13,"Sysrq","","",148,null],[13,"Tab","","",148,null],[13,"Underline","","",148,null],[13,"Unlabeled","","",148,null],[13,"VolumeDown","","",148,null],[13,"VolumeUp","","",148,null],[13,"Wake","","",148,null],[13,"WebBack","","",148,null],[13,"WebFavorites","","",148,null],[13,"WebForward","","",148,null],[13,"WebHome","","",148,null],[13,"WebRefresh","","",148,null],[13,"WebSearch","","",148,null],[13,"WebStop","","",148,null],[13,"Yen","","",148,null],[4,"WindowEvent","","Describes an event from a `Window`.",null,null],[13,"Resized","","The size of the window has changed.",149,null],[13,"Moved","","The position of the window has changed.",149,null],[13,"Closed","","The window has been closed.",149,null],[13,"DroppedFile","","A file has been dropped into the window.",149,null],[13,"HoveredFile","","A file is being hovered over the window.",149,null],[13,"HoveredFileCancelled","","A file was hovered, but has exited the window.",149,null],[13,"ReceivedCharacter","","The window received a unicode character.",149,null],[13,"Focused","","The window gained or lost focus.",149,null],[13,"KeyboardInput","","An event from the keyboard has been received.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[12,"input","","",149,null],[13,"CursorMoved","limn::prelude::glutin","The cursor has moved on the window.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[12,"position","","(x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is limited by the display area and it may have been transformed by the OS to implement effects such as cursor acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.",149,null],[13,"CursorEntered","limn::prelude::glutin","The cursor has entered the window.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[13,"CursorLeft","limn::prelude::glutin","The cursor has left the window.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[13,"MouseWheel","limn::prelude::glutin","A mouse wheel movement or touchpad scroll occurred.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[12,"delta","","",149,null],[12,"phase","","",149,null],[13,"MouseInput","limn::prelude::glutin","An mouse button press has been received.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[12,"state","","",149,null],[12,"button","","",149,null],[13,"TouchpadPressure","limn::prelude::glutin","Touchpad pressure event.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[12,"pressure","","",149,null],[12,"stage","","",149,null],[13,"AxisMotion","limn::prelude::glutin","Motion on some analog axis. May report data redundant to other, more specific events.",149,null],[12,"device_id","limn::prelude::glutin::WindowEvent","",149,null],[12,"axis","","",149,null],[12,"value","","",149,null],[13,"Refresh","limn::prelude::glutin","The window needs to be redrawn.",149,null],[13,"Touch","","Touch event has been received",149,null],[13,"HiDPIFactorChanged","","DPI scaling factor of the window has changed.",149,null],[3,"WindowBuilder","","Object that allows you to build windows.",null,null],[12,"window","","The attributes to use to create the window.",150,null],[4,"CursorState","","Describes how winit handles the cursor.",null,null],[13,"Normal","","Normal cursor behavior.",151,null],[13,"Hide","","The cursor will be invisible when over the window.",151,null],[13,"Grab","","Grabs the mouse cursor. The cursor's motion will be confined to this window and the window has exclusive access to further events regarding the cursor.",151,null],[6,"ButtonId","","Identifier for a specific button on some device.",null,null],[4,"ElementState","","Describes the input state of a key.",null,null],[13,"Pressed","","",152,null],[13,"Released","","",152,null],[3,"LAYOUT","limn::prelude","",null,null],[3,"LinearLayoutSettings","","",null,null],[12,"orientation","","Horizontal or vertical orientation of the current layout",153,null],[12,"spacing","","Specifies the extra space between elements along the primary axis",153,null],[12,"item_align","","Specifies alignment of items perpendicular to the primary axis",153,null],[12,"fill_equal","","Constrain items to have equal size along primary axis, and fill container",153,null],[12,"padding","","Minimum spacing between items",153,null],[4,"Orientation","","",null,null],[13,"Horizontal","","",154,null],[13,"Vertical","","",154,null],[4,"Spacing","","",null,null],[13,"Around","","Equal spacing before, after and between all elements",155,null],[13,"Between","","Equal spacing between elements, with no extra space on the ends",155,null],[13,"End","","Elements packed together at the start, leaving space at the end",155,null],[13,"Start","","Elements packed together at the end, leaving space at the start",155,null],[4,"ItemAlignment","","",null,null],[13,"None","","No constraints are added, items can be aligned individually",156,null],[13,"Fill","","Item width/height matched layout parent",156,null],[13,"Center","","Items centered within layout parent width/height",156,null],[13,"Left","","For a vertical layout, align items to the parent's left bound. Do not use in a horizontal layout",156,null],[13,"Right","","For a vertical layout, align items to the parent's right bound. Do not use in a horizontal layout",156,null],[13,"Top","","For a horizontal layout, align items to the parent's top bound. Do not use in a vertical layout",156,null],[13,"Bottom","","For a horizontal layout, align items to the parent's bottom bound. Do not use in a vertical layout",156,null],[4,"Align","","The orientation of Alignment along some Axis.",null,null],[13,"Start","","Align our Start with the Start of some other widget along the Axis.",157,null],[13,"Middle","","Align our Middle with the Middle of some other widget along the Axis.",157,null],[13,"End","","Align our End with the End of some other widget along the Axis.",157,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"NoWrap","","",158,null],[13,"Character","","Wrap at the first character that exceeds the width.",158,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",158,null],[14,"hashset","","Create a HashSet from a list of elements.",null,null],[14,"btreemap","","Create a BTreeMap from a list of key-value pairs",null,null],[14,"convert_args","","Macro that converts the keys or key-value pairs passed to another maplit macro. The default conversion is to use the [`Into`] trait, if no custom conversion is passed.",null,null],[14,"hashmap","","Create a HashMap from a list of key-value pairs",null,null],[14,"btreeset","","Create a BTreeSet from a list of elements.",null,null],[14,"constraints","","Used to specify a list of constraints.",null,null],[0,"render","limn","Helper functions and useful types for interacting with WebRender",null,null],[3,"RenderBuilder","limn::render","",null,null],[12,"builder","","",159,null],[12,"resources","","",159,null],[5,"draw_rect_outline","","",null,{"inputs":[{"name":"rect"},{"name":"c"},{"name":"renderbuilder"}],"output":null}],[5,"draw_horizontal_line","","",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"c"},{"name":"renderbuilder"}],"output":null}],[0,"window","limn","Wrapper around `glutin::Window`",null,null],[3,"Window","limn::window","A simple wrapper around a `glutin::GlWindow`.",null,null],[12,"window","","",160,null],[11,"new","","",160,{"inputs":[{"name":"windowbuilder"},{"name":"eventsloop"}],"output":{"name":"self"}}],[11,"gl","","",160,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[11,"swap_buffers","","",160,{"inputs":[{"name":"self"}],"output":null}],[11,"hidpi_factor","","",160,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"resize","","",160,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"size_px","","Get the size of the client area of the window in actual pixels. This is the size of the framebuffer",160,{"inputs":[{"name":"self"}],"output":{"name":"deviceuintsize"}}],[11,"size_dp","","Get the size of the client area of the window in density independent pixels.",160,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[14,"component_style","limn","",null,null],[14,"style","","",null,null],[14,"multi_event","","Simplifies setting up an EventHandler that can receive multiple events. Generates an event enum and matches each event to a method on the handler. Also creates an associated method on the handler, `add_adapters` that should be called when the handler is added to a widget, to add the \"adapter\" handlers that redirect each event to the main event handler.",null,null],[14,"forward_event","","Specifies a handler that redirects events from one widget to another. Optionally you can specify a closure that modifies the event.",null,null],[14,"named_id","","Create a new simple id type, wrapper around a usize that can be created via `IdGen`",null,null],[11,"fmt","limn::prelude::glutin","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","limn::prelude::glutin::os::unix","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","limn::prelude::glutin","",161,{"inputs":[{"name":"self"},{"name":"eventsloopclosed"}],"output":{"name":"bool"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"mousecursor"}],"output":{"name":"bool"}}],[11,"eq","","",148,{"inputs":[{"name":"self"},{"name":"virtualkeycode"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"mousescrolldelta"}],"output":{"name":"bool"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"touchphase"}],"output":{"name":"bool"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"mousebutton"}],"output":{"name":"bool"}}],[11,"eq","","",152,{"inputs":[{"name":"self"},{"name":"elementstate"}],"output":{"name":"bool"}}],[11,"eq","","",146,{"inputs":[{"name":"self"},{"name":"controlflow"}],"output":{"name":"bool"}}],[11,"eq","","",151,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"bool"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"new_x11","","",164,{"inputs":[],"output":{"name":"result"}}],[11,"new_wayland","","",164,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"is_wayland","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_x11","","",164,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_xlib_xconnection","","",164,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","limn::prelude::glutin::os::unix","",119,{"inputs":[{"name":"openerror"}],"output":{"name":"xnotsupported"}}],[11,"native_id","limn::prelude::glutin","",165,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_x11_visual","","",150,null],[11,"with_x11_screen","","",150,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"windowbuilder"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"modifiersstate"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"windowattributes"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"keyboardinput"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"windowattributes"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"modifiersstate"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"virtualkeycode"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"deviceevent"}}],[11,"clone","","",161,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopclosed"}}],[11,"clone","","",152,{"inputs":[{"name":"self"}],"output":{"name":"elementstate"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"windowevent"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"controlflow"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"mousebutton"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"touch"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"touchphase"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"creationerror"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"mousecursor"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"mousescrolldelta"}}],[11,"clone","limn::prelude::glutin::os::unix","",119,{"inputs":[{"name":"self"}],"output":{"name":"xnotsupported"}}],[11,"clone","limn::prelude::glutin","",162,{"inputs":[{"name":"self"}],"output":{"name":"deviceid"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"clone","","",166,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"clone","","",165,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"clone","","",151,{"inputs":[{"name":"self"}],"output":{"name":"cursorstate"}}],[11,"partial_cmp","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"option"}}],[11,"lt","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"le","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"gt","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"ge","","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"option"}}],[11,"lt","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"le","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"gt","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"ge","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"bool"}}],[11,"next","","",167,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",167,null],[11,"hash","","",138,null],[11,"hash","","",145,null],[11,"hash","","",162,null],[11,"hash","","",152,null],[11,"hash","","",161,null],[11,"hash","","",163,null],[11,"hash","","",148,null],[11,"description","","",161,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",143,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","limn::prelude::glutin::os::unix","",119,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",119,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","limn::prelude::glutin","",163,{"inputs":[{"name":"self"},{"name":"windowid"}],"output":{"name":"ordering"}}],[11,"cmp","","",162,{"inputs":[{"name":"self"},{"name":"deviceid"}],"output":{"name":"ordering"}}],[11,"get_xlib_window","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_display","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_screen_id","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xlib_xconnection","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_xcb_connection","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"send_xim_spot","","",168,null],[11,"get_wayland_surface","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_wayland_display","","",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_ready","","",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","limn::prelude::glutin::os::unix","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","limn::prelude::glutin","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","limn::prelude","",158,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"eq","","",157,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"wrap"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"align"}}],[11,"clone","","",157,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"clone","","",158,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","limn::geometry","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"self"}],"output":{"name":"devicepixel"}}],[11,"partial_cmp","","",169,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"option"}}],[11,"cmp","","",169,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"ordering"}}],[11,"raw_handle","limn::prelude::glutin","",170,null],[11,"raw_handle","","",171,null],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"api"}],"output":{"name":"bool"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"releasebehavior"}],"output":{"name":"bool"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"bool"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"bool"}}],[11,"from","","",125,{"inputs":[{"name":"creationerror"}],"output":{"name":"creationerror"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"glattributes"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"robustness"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"pixelformatrequirements"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"glprofile"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"releasebehavior"}}],[11,"clone","limn::prelude::glutin::os::unix","",117,{"inputs":[{"name":"self"}],"output":{"name":"rawhandle"}}],[11,"clone","limn::prelude::glutin","",132,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"headlessrendererbuilder"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"glattributes"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"glrequest"}}],[11,"description","","",126,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",125,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",125,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new Window for platforms where this is appropriate.",168,{"inputs":[{"name":"eventsloop"}],"output":{"name":"result"}}],[11,"set_title","","Modifies the title of the window.",168,null],[11,"show","","Shows the window if it was hidden.",168,null],[11,"hide","","Hides the window if it was visible.",168,null],[11,"get_position","","Returns the position of the top-left hand corner of the window relative to the  top-left hand corner of the desktop.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_position","","Modifies the position of the window.",168,null],[11,"get_inner_size","","Returns the size in pixels of the client area of the window.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_points","","Returns the size in points of the client area of the window.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_inner_size_pixels","","Returns the size in pixels of the client area of the window.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_outer_size","","Returns the size in pixels of the window.",168,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"set_inner_size","","Modifies the inner size of the window.",168,null],[11,"platform_display","","DEPRECATED. Gets the native platform specific display for this window. This is typically only required when integrating with other libraries that need this information.",168,null],[11,"platform_window","","DEPRECATED. Gets the native platform specific window handle. This is typically only required when integrating with other libraries that need this information.",168,null],[11,"set_cursor","","Modifies the mouse cursor of the window. Has no effect on Android.",168,null],[11,"hidpi_factor","","Returns the ratio between the backing framebuffer resolution and the window size in screen pixels. This is typically one for a normal display and two for a retina display.",168,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"set_cursor_position","","Changes the position of the cursor in window coordinates.",168,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"result"}}],[11,"set_cursor_state","","Sets how winit handles the cursor. See the documentation of `CursorState` for details.",168,{"inputs":[{"name":"self"},{"name":"cursorstate"}],"output":{"name":"result"}}],[11,"set_maximized","","Sets the window to maximized or back",168,null],[11,"set_fullscreen","","Sets the window to fullscreen or back",168,null],[11,"get_current_monitor","","Returns the current monitor the window is on or the primary monitor is nothing matches",168,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"id","","",168,{"inputs":[{"name":"self"}],"output":{"name":"windowid"}}],[11,"deref","","",172,null],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","limn::prelude::glutin::os::unix","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","limn::prelude::glutin","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"make_current","","",172,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",172,null],[11,"swap_buffers","","",172,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_api","","",172,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",172,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",172,null],[11,"make_current","","Creates a new OpenGL context Sets the context as the current context.",171,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","Returns true if this context is the current one in this thread.",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","Returns the address of an OpenGL function.",171,null],[11,"get_api","","Returns the API that is currently provided by this window.",171,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"swap_buffers","","",171,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_pixel_format","","",171,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",171,null],[11,"make_current","","",170,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"is_current","","",170,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_proc_address","","",170,null],[11,"swap_buffers","","",170,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_api","","",170,{"inputs":[{"name":"self"}],"output":{"name":"api"}}],[11,"get_pixel_format","","",170,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"resize","","",170,null],[11,"eq","limn::prelude","",155,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"initialize","","",173,null],[11,"clone","","",155,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"clone","","",154,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"clone","","",156,{"inputs":[{"name":"self"}],"output":{"name":"itemalignment"}}],[11,"clone","","",153,{"inputs":[{"name":"self"}],"output":{"name":"linearlayoutsettings"}}],[11,"deref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","limn::layout","",28,{"inputs":[],"output":{"name":"limnsolver"}}],[11,"update_layout","","",28,null],[11,"remove_layout","","",28,null],[11,"hide_layout","","",28,null],[11,"unhide_layout","","",28,null],[11,"update_solver","","",28,null],[11,"has_edit_variable","","",28,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"has_constraint","","",28,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"fetch_changes","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"debug_variables","","",28,null],[11,"debug_constraints","","",28,null],[11,"debug_constraint","","",28,null],[11,"debug_associated_constraints","","",28,null],[11,"debug_layouts","","",28,null],[11,"debug_layout","","",28,null],[11,"add_layout_handlers","limn::app","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"new","limn::prelude::glutin","Initializes a new `ContextBuilder` with default values.",124,{"inputs":[],"output":{"name":"contextbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",124,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"contextbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",124,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"contextbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",124,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"contextbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",124,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"contextbuilder"}}],[11,"with_vsync","","Requests that the window has vsync enabled.",124,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"contextbuilder"}}],[11,"with_shared_lists","","Share the display lists with the given `Context`.",124,{"inputs":[{"name":"self"},{"name":"context"}],"output":{"name":"contextbuilder"}}],[11,"with_multisampling","","Sets the multisampling level to request. A value of `0` indicates that multisampling must not be enabled.",124,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"contextbuilder"}}],[11,"with_depth_buffer","","Sets the number of bits in the depth buffer.",124,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"contextbuilder"}}],[11,"with_stencil_buffer","","Sets the number of bits in the stencil buffer.",124,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"contextbuilder"}}],[11,"with_pixel_format","","Sets the number of bits in the color buffer.",124,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"u8"}],"output":{"name":"contextbuilder"}}],[11,"with_stereoscopy","","Request the backend to be stereoscopic.",124,{"inputs":[{"name":"self"}],"output":{"name":"contextbuilder"}}],[11,"with_srgb","","Sets whether sRGB should be enabled on the window.",124,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"contextbuilder"}}],[11,"new","","Builds the given window along with the associated GL context, returning the pair as a `GlWindow`.",172,{"inputs":[{"name":"windowbuilder"},{"name":"contextbuilder"},{"name":"eventsloop"}],"output":{"name":"result"}}],[11,"window","","Borrow the inner `Window`.",172,{"inputs":[{"name":"self"}],"output":{"name":"window"}}],[11,"context","","Borrow the inner GL `Context`.",172,{"inputs":[{"name":"self"}],"output":{"name":"context"}}],[11,"to_gl_version","","Extract the desktop GL version, if any.",129,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map_sharing","","Turns the `sharing` parameter into another type by calling a closure.",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"glattributes"}}],[11,"new","","Initializes a new `HeadlessRendererBuilder` with default values.",136,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl","","Sets how the backend should choose the OpenGL API and version.",136,{"inputs":[{"name":"self"},{"name":"glrequest"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_profile","","Sets the desired OpenGL context profile.",136,{"inputs":[{"name":"self"},{"name":"glprofile"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_debug_flag","","Sets the debug flag for the OpenGL context.",136,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"headlessrendererbuilder"}}],[11,"with_gl_robustness","","Sets the robustness of the OpenGL context. See the docs of `Robustness`.",136,{"inputs":[{"name":"self"},{"name":"robustness"}],"output":{"name":"headlessrendererbuilder"}}],[11,"build","","Builds the headless context.",136,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build_strict","","Builds the headless context.",136,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wakeup","","Wake up the `EventsLoop` from which this proxy was created.",166,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_name","","Returns a human-readable name of the monitor.",165,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_dimensions","","Returns the number of pixels currently displayed on the monitor.",165,null],[11,"get_position","","Returns the top-left corner position of the monitor relative to the larger full screen area.",165,null],[11,"get_hidpi_factor","","Returns the ratio between the monitor's physical pixels and logical pixels.",165,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"new","","Builds a new events loop.",164,{"inputs":[],"output":{"name":"eventsloop"}}],[11,"get_available_monitors","","Returns the list of all the monitors available on the system.",164,{"inputs":[{"name":"self"}],"output":{"name":"availablemonitorsiter"}}],[11,"get_primary_monitor","","Returns the primary monitor of the system.",164,{"inputs":[{"name":"self"}],"output":{"name":"monitorid"}}],[11,"poll_events","","Fetches all the events that are pending, calls the callback function for each of them, and returns.",164,null],[11,"run_forever","","Calls `callback` every time an event is received. If no event is available, sleeps the current thread and waits for an event. If the callback returns `ControlFlow::Break` then `run_forever` will immediately return.",164,null],[11,"create_proxy","","Creates an `EventsLoopProxy` that can be used to wake up the `EventsLoop` from another thread.",164,{"inputs":[{"name":"self"}],"output":{"name":"eventsloopproxy"}}],[11,"new","","Initializes a new `WindowBuilder` with default values.",150,{"inputs":[],"output":{"name":"windowbuilder"}}],[11,"with_dimensions","","Requests the window to be of specific dimensions.",150,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_min_dimensions","","Sets a minimum dimension size for the window",150,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_max_dimensions","","Sets a maximum dimension size for the window",150,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"windowbuilder"}}],[11,"with_title","","Requests a specific title for the window.",150,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"windowbuilder"}}],[11,"with_fullscreen","","Sets the window fullscreen state. None means a normal window, Some(MonitorId) means a fullscreen window on that specific monitor",150,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"windowbuilder"}}],[11,"with_maximized","","Requests maximized mode.",150,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_visibility","","Sets whether the window will be initially hidden or visible.",150,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_transparency","","Sets whether the background of the window should be transparent.",150,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_decorations","","Sets whether the window should have a border, a title bar, etc.",150,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"windowbuilder"}}],[11,"with_multitouch","","Enables multitouch.",150,{"inputs":[{"name":"self"}],"output":{"name":"windowbuilder"}}],[11,"build","","Builds the window.",150,{"inputs":[{"name":"self"},{"name":"eventsloop"}],"output":{"name":"result"}}],[11,"new","limn::prelude","Creates a default `LinearLayoutSettings`, aligned to the end of the parent container",153,{"inputs":[{"name":"orientation"}],"output":{"name":"linearlayoutsettings"}}]],"paths":[[8,"Component"],[8,"ComponentStyle"],[8,"WidgetModifier"],[8,"DrawMergeStyle"],[8,"ModifierMergeStyle"],[3,"Theme"],[3,"EventArgs"],[8,"EventHandler"],[4,"Property"],[3,"MOUSEOVER"],[3,"PRESSED"],[3,"ACTIVATED"],[3,"ACTIVATED_PRESSED"],[3,"SELECTED"],[3,"INACTIVE"],[3,"FOCUSED"],[3,"DrawWrapper"],[8,"Draw"],[8,"DrawComponent"],[3,"DrawEventHandler"],[3,"StateUpdated"],[3,"StyleUpdated"],[3,"Widget"],[3,"LayoutGuard"],[3,"LayoutGuardMut"],[3,"PropsGuard"],[3,"DrawStateGuard"],[3,"WidgetWeak"],[3,"LimnSolver"],[3,"UpdateLayout"],[3,"LayoutChanged"],[3,"ResizeWindow"],[3,"LayoutUpdated"],[3,"App"],[3,"FrameEvent"],[3,"Button"],[3,"ButtonStyle"],[3,"ToggleButton"],[3,"ToggleButtonStyle"],[4,"ToggleEvent"],[3,"ScrollContainer"],[3,"ScrollStyle"],[3,"ListItemSelected"],[3,"List"],[3,"ListStyle"],[3,"ItemSelected"],[3,"ListHandler"],[3,"ListItemHandler"],[3,"Slider"],[3,"SliderStyle"],[3,"SliderEvent"],[3,"SetSliderValue"],[3,"SetSliderRange"],[4,"Orientation"],[4,"HandleStyle"],[4,"BarStyle"],[3,"TextUpdated"],[3,"EditText"],[3,"EditTextStyle"],[3,"Image"],[3,"GLCanvasBuilder"],[3,"StaticText"],[3,"StaticTextStyle"],[3,"RectState"],[3,"RectStyle"],[3,"EllipseState"],[3,"EllipseStyle"],[3,"TextState"],[3,"TextStyle"],[3,"ImageState"],[3,"GLCanvasState"],[3,"Ui"],[3,"RegisterWidget"],[3,"RemoveWidget"],[3,"ChildAttachedEvent"],[4,"ChildrenUpdatedEvent"],[3,"WidgetAttachedEvent"],[3,"WidgetDetachedEvent"],[3,"WidgetsUnderCursor"],[3,"WidgetsBfs"],[8,"RectExt"],[8,"SizeExt"],[6,"Rect"],[6,"Size"],[3,"WidgetId"],[3,"Resources"],[3,"WidgetId"],[8,"Id"],[3,"IdGen"],[3,"FontInfo"],[3,"FontDescriptor"],[3,"FontLoader"],[3,"ImageInfo"],[3,"ImageLoader"],[4,"ImageSource"],[3,"Map"],[3,"Color"],[3,"InputEvent"],[3,"MouseMoved"],[3,"MouseWheel"],[3,"MouseButton"],[3,"WidgetMouseWheel"],[3,"WidgetMouseButton"],[3,"ClickEvent"],[4,"MouseOverEvent"],[3,"CursorLeftWindow"],[3,"ReceivedCharacter"],[3,"KeyboardInput"],[3,"WidgetKeyboardInput"],[3,"WidgetReceivedCharacter"],[4,"KeyboardInputEvent"],[3,"FocusHandler"],[3,"DragEvent"],[4,"DragState"],[3,"EscKeyCloseHandler"],[3,"DebugSettingsHandler"],[8,"WindowBuilderExt"],[4,"RawHandle"],[8,"WindowExt"],[4,"XNotSupported"],[8,"EventsLoopExt"],[8,"MonitorIdExt"],[8,"GlContextExt"],[8,"GlContext"],[3,"ContextBuilder"],[4,"CreationError"],[4,"ContextError"],[4,"Api"],[4,"GlProfile"],[4,"GlRequest"],[4,"Robustness"],[4,"ReleaseBehavior"],[3,"PixelFormat"],[3,"PixelFormatRequirements"],[3,"GlAttributes"],[4,"MouseScrollDelta"],[3,"HeadlessRendererBuilder"],[3,"ModifiersState"],[4,"TouchPhase"],[4,"Event"],[3,"KeyboardInput"],[4,"MouseCursor"],[3,"WindowAttributes"],[4,"WindowCreationError"],[3,"Touch"],[4,"MouseButton"],[4,"ControlFlow"],[4,"DeviceEvent"],[4,"VirtualKeyCode"],[4,"WindowEvent"],[3,"WindowBuilder"],[4,"CursorState"],[4,"ElementState"],[3,"LinearLayoutSettings"],[4,"Orientation"],[4,"Spacing"],[4,"ItemAlignment"],[4,"Align"],[4,"Wrap"],[3,"RenderBuilder"],[3,"Window"],[3,"EventsLoopClosed"],[3,"DeviceId"],[3,"WindowId"],[3,"EventsLoop"],[3,"MonitorId"],[3,"EventsLoopProxy"],[3,"AvailableMonitorsIter"],[3,"Window"],[3,"DevicePixel"],[3,"Context"],[3,"HeadlessContext"],[3,"GlWindow"],[3,"LAYOUT"]]};
searchIndex["limn_layout"] = {"doc":"","items":[[3,"LayoutVars","limn_layout","A set of cassowary `Variable`s representing the bounding rectangle of a layout.",null,null],[12,"left","","",0,null],[12,"top","","",0,null],[12,"right","","",0,null],[12,"bottom","","",0,null],[12,"width","","",0,null],[12,"height","","",0,null],[3,"Layout","","Represents a single item in the overall layout hierarchy with a bounding rectangle and an id.",null,null],[12,"vars","","",1,null],[12,"name","","",1,null],[12,"id","","",1,null],[12,"hidden","","",1,null],[3,"VariableEditable","","",null,null],[12,"builder","","",2,null],[12,"var","","",2,null],[3,"EditVariable","","",null,null],[3,"Frame","","",null,null],[3,"ExactFrame","","",null,null],[3,"LAYOUT","","",null,null],[4,"VarType","","",null,null],[13,"Left","","",3,null],[13,"Top","","",3,null],[13,"Right","","",3,null],[13,"Bottom","","",3,null],[13,"Width","","",3,null],[13,"Height","","",3,null],[13,"Other","","",3,null],[0,"solver","","",null,null],[3,"LimnSolver","limn_layout::solver","",null,null],[12,"solver","","",4,null],[12,"strict","","",4,null],[3,"LayoutManager","","",null,null],[11,"new","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"update_layout","","",4,{"inputs":[{"name":"self"},{"name":"layout"}],"output":null}],[11,"remove_layout","","",4,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":null}],[11,"hide_layout","","",4,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":null}],[11,"unhide_layout","","",4,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":null}],[11,"update_solver","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"has_edit_variable","","",4,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"bool"}}],[11,"has_constraint","","",4,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"fetch_changes","","",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"debug_variables","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"debug_constraints","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"debug_constraint","","",4,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":null}],[11,"debug_associated_constraints","","",4,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":null}],[11,"debug_layouts","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"debug_layout","","",4,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":null}],[11,"new","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"register_layout","","",5,{"inputs":[{"name":"self"},{"name":"layout"}],"output":null}],[11,"update_layout","","",5,{"inputs":[{"name":"self"},{"name":"layout"}],"output":null}],[11,"add_constraint","","",5,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"bool"}}],[11,"remove_constraint","","",5,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":null}],[11,"queue_constraint","","",5,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"constraint"}],"output":null}],[11,"dequeue_constraints","","",5,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"vec"}}],[11,"layout_hidden","","",5,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":{"name":"bool"}}],[11,"layout_name","","",5,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":{"name":"string"}}],[11,"children","","",5,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":{"name":"vec"}}],[11,"layout_vars","","",5,{"inputs":[{"name":"self"},{"name":"layoutid"}],"output":{"name":"vec"}}],[11,"fmt_variable","","",5,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"string"}}],[11,"fmt_edit_variable","","",5,{"inputs":[{"name":"self"},{"name":"editvariable"}],"output":{"name":"string"}}],[11,"fmt_constraint","","",5,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":{"name":"string"}}],[0,"constraint","limn_layout","",null,null],[3,"WidgetConstraintBuilder","limn_layout::constraint","",null,null],[3,"PaddableConstraintBuilder","","",null,null],[4,"WidgetConstraint","","",null,null],[13,"Width","","",6,null],[13,"Height","","",6,null],[13,"MinWidth","","",6,null],[13,"MinHeight","","",6,null],[13,"Size","","",6,null],[13,"MinSize","","",6,null],[13,"AspectRatio","","",6,null],[13,"Shrink","","",6,null],[13,"ShrinkHorizontal","","",6,null],[13,"ShrinkVertical","","",6,null],[13,"TopLeft","","",6,null],[13,"Center","","",6,null],[13,"CenterHorizontal","","",6,null],[13,"CenterVertical","","",6,null],[4,"PaddableConstraint","","",null,null],[13,"AlignTop","","",7,null],[13,"AlignBottom","","",7,null],[13,"AlignLeft","","",7,null],[13,"AlignRight","","",7,null],[13,"AlignAbove","","",7,null],[13,"AlignBelow","","",7,null],[13,"AlignToLeftOf","","",7,null],[13,"AlignToRightOf","","",7,null],[13,"Above","","",7,null],[13,"Below","","",7,null],[13,"ToLeftOf","","",7,null],[13,"ToRightOf","","",7,null],[13,"BoundLeft","","",7,null],[13,"BoundTop","","",7,null],[13,"BoundRight","","",7,null],[13,"BoundBottom","","",7,null],[13,"BoundBy","","",7,null],[13,"MatchLayout","","",7,null],[13,"MatchWidth","","",7,null],[13,"MatchHeight","","",7,null],[5,"width","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"height","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"min_width","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"min_height","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"size","","",null,{"inputs":[{"name":"typedsize2d"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"min_size","","",null,{"inputs":[{"name":"typedsize2d"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"aspect_ratio","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"shrink","","",null,{"inputs":[],"output":{"name":"widgetconstraintbuilder"}}],[5,"shrink_horizontal","","",null,{"inputs":[],"output":{"name":"widgetconstraintbuilder"}}],[5,"shrink_vertical","","",null,{"inputs":[],"output":{"name":"widgetconstraintbuilder"}}],[5,"top_left","","",null,{"inputs":[{"name":"typedpoint2d"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"center","","",null,{"inputs":[{"name":"t"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"center_horizontal","","",null,{"inputs":[{"name":"t"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"center_vertical","","",null,{"inputs":[{"name":"t"}],"output":{"name":"widgetconstraintbuilder"}}],[5,"align_top","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_bottom","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_left","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_right","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_above","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_below","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_to_left_of","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"align_to_right_of","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"above","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"below","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"to_left_of","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"to_right_of","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"bound_left","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"bound_top","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"bound_right","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"bound_bottom","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"bound_by","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"match_layout","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"match_width","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[5,"match_height","","",null,{"inputs":[{"name":"t"}],"output":{"name":"paddableconstraintbuilder"}}],[8,"ConstraintBuilder","","",null,null],[10,"build","","",8,{"inputs":[{"name":"self"},{"name":"layoutvars"}],"output":{"name":"vec"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"widgetconstraint"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"paddableconstraint"}}],[11,"builder","","",6,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"widgetconstraintbuilder"}}],[11,"builder","","",7,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"paddableconstraintbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"widgetconstraintbuilder"}}],[11,"strength","","",9,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"paddableconstraintbuilder"}}],[11,"strength","","",10,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"padding","","",10,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"build","","",9,{"inputs":[{"name":"self"},{"name":"layoutvars"}],"output":{"name":"vec"}}],[11,"build","","",10,{"inputs":[{"name":"self"},{"name":"layoutvars"}],"output":{"name":"vec"}}],[0,"linear_layout","limn_layout","",null,null],[3,"LinearLayoutSettings","limn_layout::linear_layout","",null,null],[12,"orientation","","Horizontal or vertical orientation of the current layout",11,null],[12,"spacing","","Specifies the extra space between elements along the primary axis",11,null],[12,"item_align","","Specifies alignment of items perpendicular to the primary axis",11,null],[12,"fill_equal","","Constrain items to have equal size along primary axis, and fill container",11,null],[12,"padding","","Minimum spacing between items",11,null],[3,"LinearLayout","","",null,null],[4,"Spacing","","",null,null],[13,"Around","","Equal spacing before, after and between all elements",12,null],[13,"Between","","Equal spacing between elements, with no extra space on the ends",12,null],[13,"End","","Elements packed together at the start, leaving space at the end",12,null],[13,"Start","","Elements packed together at the end, leaving space at the start",12,null],[4,"ItemAlignment","","",null,null],[13,"None","","No constraints are added, items can be aligned individually",13,null],[13,"Fill","","Item width/height matched layout parent",13,null],[13,"Center","","Items centered within layout parent width/height",13,null],[13,"Left","","For a vertical layout, align items to the parent's left bound. Do not use in a horizontal layout",13,null],[13,"Right","","For a vertical layout, align items to the parent's right bound. Do not use in a horizontal layout",13,null],[13,"Top","","For a horizontal layout, align items to the parent's top bound. Do not use in a vertical layout",13,null],[13,"Bottom","","For a horizontal layout, align items to the parent's bottom bound. Do not use in a vertical layout",13,null],[4,"Orientation","","",null,null],[13,"Horizontal","","",14,null],[13,"Vertical","","",14,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"spacing"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"spacing"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"itemalignment"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"linearlayoutsettings"}}],[11,"new","","Creates a default `LinearLayoutSettings`, aligned to the end of the parent container",11,{"inputs":[{"name":"orientation"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"orientation"}}],[11,"new","","",15,{"inputs":[{"name":"layout"},{"name":"linearlayoutsettings"}],"output":{"name":"self"}}],[11,"add_child","","",15,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[11,"remove_child","","",15,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[0,"grid_layout","limn_layout","",null,null],[3,"GridLayout","limn_layout::grid_layout","",null,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"gridlayout"}}],[11,"new","","",16,{"inputs":[{"name":"layout"},{"name":"usize"}],"output":{"name":"self"}}],[11,"add_child","","",16,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[6,"Length","limn_layout","",null,null],[6,"Size","","",null,null],[6,"Point","","",null,null],[6,"Rect","","",null,null],[6,"LayoutId","","",null,null],[8,"LayoutRef","","",null,null],[10,"layout_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[8,"LayoutContainer","","Defines what constraints a parent applies to it's children as they are added",null,null],[10,"add_child","","",18,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[11,"remove_child","","",18,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"array","","Returns the current inner state of this struct as an array",0,null],[11,"var_type","","If a `Variable` matches one of the variables in this layout, return it's type",0,{"inputs":[{"name":"self"},{"name":"variable"}],"output":{"name":"vartype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"vartype"}}],[11,"layout_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"layout_ref","","Returns a copy of the current `LayoutVars`",0,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"new","","Creates a new `Layout`.",1,{"inputs":[{"name":"layoutid"},{"name":"option"}],"output":{"name":"self"}}],[11,"layout","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"no_container","","Clears the container of the current `Layout`.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_container","","Replaces the container of the current layout. The container is what determines what constraints will be added between this layout and it's children, as they are added, if any.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"edit_left","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableeditable"}}],[11,"edit_top","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableeditable"}}],[11,"edit_right","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableeditable"}}],[11,"edit_bottom","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableeditable"}}],[11,"edit_width","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableeditable"}}],[11,"edit_height","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variableeditable"}}],[11,"create_constraint","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"vec"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"remove_constraint","","",1,{"inputs":[{"name":"self"},{"name":"constraint"}],"output":null}],[11,"remove_constraints","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"has_constraint","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"get_constraints","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashset"}}],[11,"get_removed_constraints","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_edit_vars","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_child","","",1,{"inputs":[{"name":"self"},{"name":"layout"}],"output":null}],[11,"remove_child","","",1,{"inputs":[{"name":"self"},{"name":"layout"}],"output":null}],[11,"get_removed_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_children","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"add_associated_vars","","",1,{"inputs":[{"name":"self"},{"name":"layoutvars"},{"name":"str"}],"output":null}],[11,"add_associated_var","","",1,{"inputs":[{"name":"self"},{"name":"variable"},{"name":"str"}],"output":null}],[11,"get_associated_vars","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"hide","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"show","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",2,{"inputs":[{"name":"layout"},{"name":"variable"}],"output":{"name":"self"}}],[11,"strength","","",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"self"}}],[11,"set","","",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"self"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"editvariable"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"frame"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"add_child","","Adds a weak constraint to a Frame",20,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"exactframe"}}],[11,"add_child","","",21,{"inputs":[{"name":"self"},{"name":"layout"},{"name":"layout"}],"output":null}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"layoutvars"}}],[11,"initialize","","",22,{"inputs":[{"name":"self"}],"output":null}],[14,"constraints","","Used to specify a list of constraints.",null,null]],"paths":[[3,"LayoutVars"],[3,"Layout"],[3,"VariableEditable"],[4,"VarType"],[3,"LimnSolver"],[3,"LayoutManager"],[4,"WidgetConstraint"],[4,"PaddableConstraint"],[8,"ConstraintBuilder"],[3,"WidgetConstraintBuilder"],[3,"PaddableConstraintBuilder"],[3,"LinearLayoutSettings"],[4,"Spacing"],[4,"ItemAlignment"],[4,"Orientation"],[3,"LinearLayout"],[3,"GridLayout"],[8,"LayoutRef"],[8,"LayoutContainer"],[3,"EditVariable"],[3,"Frame"],[3,"ExactFrame"],[3,"LAYOUT"]]};
searchIndex["limn_text_layout"] = {"doc":"Text layout logic.","items":[[3,"Lines","limn_text_layout","An iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,null],[4,"Wrap","","The way in which text should wrap around the width.",null,null],[13,"NoWrap","","",0,null],[13,"Character","","Wrap at the first character that exceeds the width.",0,null],[13,"Whitespace","","Wrap at the first word that exceeds the width.",0,null],[5,"get_text_size","","",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"f32"},{"name":"f32"},{"name":"wrap"}],"output":{"name":"size"}}],[5,"get_text_height","","",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"f32"},{"name":"f32"},{"name":"wrap"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"get_line_rects","","",null,{"inputs":[{"name":"str"},{"name":"rect"},{"name":"font"},{"name":"f32"},{"name":"f32"},{"name":"wrap"},{"name":"align"}],"output":{"name":"vec"}}],[5,"get_positioned_glyphs","","",null,{"inputs":[{"name":"str"},{"name":"rect"},{"name":"font"},{"name":"f32"},{"name":"f32"},{"name":"wrap"},{"name":"align"}],"output":{"name":"vec"}}],[5,"lines","","Produce an iterator yielding each line within the given `text` as a new `&str`, where the start and end indices into each line are provided by the given iterator.",null,{"inputs":[{"name":"str"},{"name":"i"}],"output":{"name":"lines"}}],[5,"pt_to_px","","Converts the given font size in \"points\" to its font size in pixels. assumes 96 dpi display. 1 pt = 1/72\"",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"px_to_pt","","",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"pt_to_scale","","Converts the given font size in \"points\" to a uniform `rusttype::Scale`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"scale"}}],[0,"types","","",null,null],[3,"Range","limn_text_layout::types","",null,null],[12,"start","","The start of some `Range` along an axis.",1,null],[12,"end","","The end of some `Range` along an axis.",1,null],[4,"Align","","The orientation of Alignment along some Axis.",null,null],[13,"Start","","Align our Start with the Start of some other widget along the Axis.",2,null],[13,"Middle","","Align our Middle with the Middle of some other widget along the Axis.",2,null],[13,"End","","Align our End with the End of some other widget along the Axis.",2,null],[6,"Size","","",null,null],[6,"Point","","",null,null],[6,"Vector","","",null,null],[6,"Rect","","",null,null],[8,"RectExt","","",null,null],[10,"left","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"top","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"right","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"bottom","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"width","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"height","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"from_ranges","","",3,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"self"}}],[10,"x_range","","",3,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[10,"y_range","","",3,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"left","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"top","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"right","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"bottom","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"width","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"height","","",4,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"from_ranges","","",4,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"self"}}],[11,"x_range","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"y_range","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"range"}],"output":{"name":"bool"}}],[11,"new","","",1,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"range"}}],[11,"from_pos_and_len","","",1,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"range"}}],[11,"middle","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"is_over","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"has_same_direction","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"shift","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"range"}}],[11,"undirected","","",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"invert","","",1,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"align_start_of","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_middle_of","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"align_end_of","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"cursor","limn_text_layout","",null,null],[3,"XysPerLine","limn_text_layout::cursor","Every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"XysPerLineFromText","","Similarly to `XysPerLine`, yields every possible cursor position within each line of text yielded by the given iterator.",null,null],[3,"Xs","","Each possible cursor position along the x axis within a line of text.",null,null],[3,"Index","","An index representing the position of a cursor within some text.",null,null],[12,"line","","The index of the line upon which the cursor is situated.",5,null],[12,"char","","The index within all possible cursor positions for the line.",5,null],[5,"xys_per_line","","Every possible cursor position within each line of text yielded by the given iterator.",null,{"inputs":[{"name":"i"},{"name":"font"},{"name":"str"},{"name":"f32"}],"output":{"name":"xysperline"}}],[5,"xys_per_line_from_text","","Similarly to `xys_per_line`, this produces an iterator yielding every possible cursor position within each line of text yielded by the given iterator.",null,null],[5,"index_before_char","","Convert the given character index into a cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"option"}}],[5,"xy_at","","Determine the xy location of the cursor at the given cursor `Index`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[5,"closest_line","","Find the closest line for the given `y` position, and return the line index, Xs iterator, and y-range of that line",null,{"inputs":[{"name":"f32"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_and_xy","","Find the closest cursor index to the given `xy` position, and the center `Point` of that cursor.",null,{"inputs":[{"name":"point"},{"name":"i"}],"output":{"name":"option"}}],[5,"closest_cursor_index_on_line","","Find the closest cursor index to the given `x` position on the given line along with the `x` position of that cursor.",null,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"xysperline"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"xysperlinefromtext"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"index"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"bool"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"index"}],"output":{"name":"ordering"}}],[11,"previous_word_start","","The cursor index of the beginning of the word (block of non-whitespace) before `self`.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"next_word_end","","The cursor index of the end of the first word (block of non-whitespace) after `self`.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"i"}],"output":{"name":"option"}}],[11,"previous","","The cursor index that comes before `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"next","","The cursor index that follows `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"clamp_to_lines","","Clamps `self` to the given lines.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"glyph","limn_text_layout","",null,null],[3,"GlyphRects","limn_text_layout::glyph","An iterator yielding the `Rect` for each `char`'s `Glyph` in the given `text`.",null,null],[3,"GlyphRectsPerLine","","An iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",null,null],[3,"SelectedGlyphRects","","Yields a `Rect` for each selected character in a single line of text.",null,null],[3,"SelectedGlyphRectsPerLine","","Yields an iteraor yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",null,null],[5,"index_after_cursor","","Find the index of the character that directly follows the cursor at the given `cursor_idx`.",null,{"inputs":[{"name":"i"},{"name":"index"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Produce an iterator that, for every `(line, line_rect)` pair yielded by the given iterator, produces an iterator that yields a `Rect` for every character in that line.",10,{"inputs":[{"name":"i"},{"name":"font"},{"name":"f32"}],"output":{"name":"glyphrectsperline"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Produces an iterator that yields iteraors yielding `Rect`s for each selected character in each line of text within the given iterator yielding char `Rect`s.",12,{"inputs":[{"name":"i"},{"name":"font"},{"name":"f32"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedglyphrectsperline"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"line","limn_text_layout","",null,null],[3,"Break","limn_text_layout::line","",null,null],[3,"LineInfo","","Information about a single line of text within a `&str`.",null,null],[12,"start_byte","","The index into the `&str` that represents the first character within the line.",13,null],[12,"start_char","","The character index of the first character in the line.",13,null],[12,"end_break","","The index within the `&str` at which this line breaks into a new line, along with the index at which the following line begins. The variant describes whether the break is caused by a `Newline` character or a `Wrap` by the given wrap function.",13,null],[12,"width","","The total width of all characters within the line.",13,null],[3,"LineInfos","","An iterator yielding an `Info` struct for each line in the given `text` wrapped by the given `next_break_fn`.",null,null],[3,"LineRects","","An iterator yielding a `Rect` for each line in",null,null],[3,"SelectedLineRects","","An iterator yielding a `Rect` for each selected line in a block of text.",null,null],[5,"width","","Produce the width of the given line of text including spaces (i.e. ' ').",null,{"inputs":[{"name":"str"},{"name":"font"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"break"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"break"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"lineinfo"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"lineinfo"}],"output":{"name":"bool"}}],[11,"end_byte","","The end of the byte index range for indexing into the slice.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end_char","","The end of the index range for indexing into the slice.",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"byte_range","","The index range for indexing (via bytes) into the original str slice.",13,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"char_range","","The index range for indexing into a `char` iterator over the original str slice.",13,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"lineinfos"}}],[11,"new","","",15,{"inputs":[{"name":"str"},{"name":"font"},{"name":"f32"},{"name":"wrap"},{"name":"f32"}],"output":{"name":"self"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"linerects"}}],[11,"new","","Produce an iterator yielding the bounding `Rect` for each line in the text.",16,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"rect"},{"name":"align"},{"name":"f32"}],"output":{"name":"self"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Produces an iterator yielding a `Rect` for the selected range in each selected line in a block of text.",17,{"inputs":[{"name":"i"},{"name":"font"},{"name":"f32"},{"name":"index"},{"name":"index"}],"output":{"name":"selectedlinerects"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"PositionedGlyph","limn_text_layout","The RustType `PositionedGlyph` type.",null,null],[6,"Font","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Wrap"],[3,"Range"],[4,"Align"],[8,"RectExt"],[6,"Rect"],[3,"Index"],[3,"XysPerLine"],[3,"XysPerLineFromText"],[3,"Xs"],[3,"GlyphRects"],[3,"GlyphRectsPerLine"],[3,"SelectedGlyphRects"],[3,"SelectedGlyphRectsPerLine"],[3,"LineInfo"],[3,"Break"],[3,"LineInfos"],[3,"LineRects"],[3,"SelectedLineRects"],[3,"Lines"]]};
initSearch(searchIndex);
